{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# My attempt at Euler Project\n-----"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "First some global utilities"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const sum = (x,y) => x + y;\nconst sumArray = (a:number[]) => a.reduce(sum, 0);\nconst isEven = (x: number): boolean => x % 2 === 0;\nconst isMultipleOf = (x:number) => (n:number) => n % x === 0;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Problem 1\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const sumMultiplesUpTo = (x:number) => sumArray([...(Array(x).keys())]\n    .filter(x => isMultipleOf(3)(x) || isMultipleOf(5)(x)))\n\nsumMultiplesUpTo(1000)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m233168\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Problem #2\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "/**\n *  Approach 1, functionalish with reverses\n */ \nconst fib = (a: number[]) => [[...a].reverse()].flatMap(([y, x]) => [...a, x + y]);\nconst fibTo = (m: number) => \n    (c: number[] = [0, 1, 2], n?: number[]) => \n        [...n = fib(c)].pop() > m ? n : fibTo(m)(n);\n\n        \n/**\n * Approach 2, using lengths and closures\n */\nconst fibbTo = (a:number[], M:number, z?:number[]) => \n    (z = [...a, a[a.length -2] + a[a.length -1]])[z.length - 1] > M ? a : fibbTo(z, M);\n\nconst evenFibsTo = (mv:number) => fibTo(mv)().filter(isEven);\nconst sumEvenFibsTo = (mv:number) => sumArray(evenFibsTo(mv));\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const maxVal = 4000000;\n\nsumEvenFibsTo(maxVal);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.error",
                            "value": {
                                "name": "ReferenceError",
                                "message": "sumEvenFibsTo is not defined",
                                "stack": "    at <Cell 8> [3, 13]\n    at <Cell 8> [5, 46]\n    at Script.runInContext (node:vm:139:12)\n    at Script.runInNewContext (node:vm:144:17)\n    at Object.runInNewContext (node:vm:298:38)\n    at C (/Users/edumosqueda/.vscode/extensions/donjayamanne.typescript-notebook-2.0.4/out/extension/server/index.js:2:113345)\n    at t.execCode (/Users/edumosqueda/.vscode/extensions/donjayamanne.typescript-notebook-2.0.4/out/extension/server/index.js:2:114312)\n    at k.<anonymous> (/Users/edumosqueda/.vscode/extensions/donjayamanne.typescript-notebook-2.0.4/out/extension/server/index.js:2:142138)\n    at k.emit (node:events:390:28)\n    at k.emit (node:domain:475:12)"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const isPrime = (num) => {\n  for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n};\n    \nconst getPrimesTo = (n: number) => [...Array(n).keys()].filter(isPrime);\ngetPrimesTo(1000000)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m2\u001b[39m,",
                                "  \u001b[33m3\u001b[39m,",
                                "  \u001b[33m5\u001b[39m,",
                                "  \u001b[33m7\u001b[39m,",
                                "  \u001b[33m11\u001b[39m,",
                                "  \u001b[33m13\u001b[39m,",
                                "  \u001b[33m17\u001b[39m,",
                                "  \u001b[33m19\u001b[39m,",
                                "  \u001b[33m23\u001b[39m,",
                                "  \u001b[33m29\u001b[39m,",
                                "  \u001b[33m31\u001b[39m,",
                                "  \u001b[33m37\u001b[39m,",
                                "  \u001b[33m41\u001b[39m,",
                                "  \u001b[33m43\u001b[39m,",
                                "  \u001b[33m47\u001b[39m,",
                                "  \u001b[33m53\u001b[39m,",
                                "  \u001b[33m59\u001b[39m,",
                                "  \u001b[33m61\u001b[39m,",
                                "  \u001b[33m67\u001b[39m,",
                                "  \u001b[33m71\u001b[39m,",
                                "  \u001b[33m73\u001b[39m,",
                                "  \u001b[33m79\u001b[39m,",
                                "  \u001b[33m83\u001b[39m,",
                                "  \u001b[33m89\u001b[39m,",
                                "  \u001b[33m97\u001b[39m,",
                                "  \u001b[33m101\u001b[39m,",
                                "  \u001b[33m103\u001b[39m,",
                                "  \u001b[33m107\u001b[39m,",
                                "  \u001b[33m109\u001b[39m,",
                                "  \u001b[33m113\u001b[39m,",
                                "  \u001b[33m127\u001b[39m,",
                                "  \u001b[33m131\u001b[39m,",
                                "  \u001b[33m137\u001b[39m,",
                                "  \u001b[33m139\u001b[39m,",
                                "  \u001b[33m149\u001b[39m,",
                                "  \u001b[33m151\u001b[39m,",
                                "  \u001b[33m157\u001b[39m,",
                                "  \u001b[33m163\u001b[39m,",
                                "  \u001b[33m167\u001b[39m,",
                                "  \u001b[33m173\u001b[39m,",
                                "  \u001b[33m179\u001b[39m,",
                                "  \u001b[33m181\u001b[39m,",
                                "  \u001b[33m191\u001b[39m,",
                                "  \u001b[33m193\u001b[39m,",
                                "  \u001b[33m197\u001b[39m,",
                                "  \u001b[33m199\u001b[39m,",
                                "  \u001b[33m211\u001b[39m,",
                                "  \u001b[33m223\u001b[39m,",
                                "  \u001b[33m227\u001b[39m,",
                                "  \u001b[33m229\u001b[39m,",
                                "  \u001b[33m233\u001b[39m,",
                                "  \u001b[33m239\u001b[39m,",
                                "  \u001b[33m241\u001b[39m,",
                                "  \u001b[33m251\u001b[39m,",
                                "  \u001b[33m257\u001b[39m,",
                                "  \u001b[33m263\u001b[39m,",
                                "  \u001b[33m269\u001b[39m,",
                                "  \u001b[33m271\u001b[39m,",
                                "  \u001b[33m277\u001b[39m,",
                                "  \u001b[33m281\u001b[39m,",
                                "  \u001b[33m283\u001b[39m,",
                                "  \u001b[33m293\u001b[39m,",
                                "  \u001b[33m307\u001b[39m,",
                                "  \u001b[33m311\u001b[39m,",
                                "  \u001b[33m313\u001b[39m,",
                                "  \u001b[33m317\u001b[39m,",
                                "  \u001b[33m331\u001b[39m,",
                                "  \u001b[33m337\u001b[39m,",
                                "  \u001b[33m347\u001b[39m,",
                                "  \u001b[33m349\u001b[39m,",
                                "  \u001b[33m353\u001b[39m,",
                                "  \u001b[33m359\u001b[39m,",
                                "  \u001b[33m367\u001b[39m,",
                                "  \u001b[33m373\u001b[39m,",
                                "  \u001b[33m379\u001b[39m,",
                                "  \u001b[33m383\u001b[39m,",
                                "  \u001b[33m389\u001b[39m,",
                                "  \u001b[33m397\u001b[39m,",
                                "  \u001b[33m401\u001b[39m,",
                                "  \u001b[33m409\u001b[39m,",
                                "  \u001b[33m419\u001b[39m,",
                                "  \u001b[33m421\u001b[39m,",
                                "  \u001b[33m431\u001b[39m,",
                                "  \u001b[33m433\u001b[39m,",
                                "  \u001b[33m439\u001b[39m,",
                                "  \u001b[33m443\u001b[39m,",
                                "  \u001b[33m449\u001b[39m,",
                                "  \u001b[33m457\u001b[39m,",
                                "  \u001b[33m461\u001b[39m,",
                                "  \u001b[33m463\u001b[39m,",
                                "  \u001b[33m467\u001b[39m,",
                                "  \u001b[33m479\u001b[39m,",
                                "  \u001b[33m487\u001b[39m,",
                                "  \u001b[33m491\u001b[39m,",
                                "  \u001b[33m499\u001b[39m,",
                                "  \u001b[33m503\u001b[39m,",
                                "  \u001b[33m509\u001b[39m,",
                                "  \u001b[33m521\u001b[39m,",
                                "  \u001b[33m523\u001b[39m,",
                                "  \u001b[33m541\u001b[39m,",
                                "  ... 78398 more items",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}