{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "import { Eq } from 'fp-ts/Eq';\n\ntype Ordering = -1 | 0 | 1;\n\ninterface Ord<A> extends Eq<A> {\n  readonly compare: (x: A, y: A) => Ordering;\n}\n\nconst ordNumber: Ord<number> = {\n  equals: (x, y) => x === y,\n  compare: (x, y) => (x < y ? -1 : x > y ? 1 : 0),\n};\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Instances must satisfy the following laws:\n\nReflexivity: `compare(x, x) === 0`, for all `x` in `A`\nAntisymmetry: if `compare(x, y) <= 0` and `compare(y, x) <= 0` then `x` is equal to `y`, for all `x, y` in `A`\nTransitivity: if `compare(x, y) <= 0` and `compare(y, z) <= 0` then `compare(x, z) <= 0`, for all `x, y, z` in `A`\nAdditionally compare must comply with Eq's equals:\n\n`compare(x, y) === 0` if and only if `equals(x, y) === true`, for all `x, y` in `A`\n\nNote. A lawful equals can be derived from compare in the following way\n```js\nequals: (x, y) => compare(x, y) === 0\n```"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { Ord, fromCompare } from 'fp-ts/Ord';\n\nconst ordNumber: Ord<number> = fromCompare((x, y) =>\n  x < y ? -1 : x > y ? 1 : 0\n);\n\nfunction min<A>(O: Ord<A>): (x: A, y: A) => A {\n  return (x, y) => (O.compare(x, y) === 1 ? y : x)\n}\n\nmin(ordNumber)(123, 321) // 1"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m123\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}